{"version":3,"sources":["components/Navbar/Navbar.jsx","App.js","serviceWorker.js","i18n.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","_ref","changeLanguageHandler","classes","react_default","a","createElement","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","App","i18n","useTranslation","components_Navbar_Navbar","lng","changeLanguage","t","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","use","initReactI18next","init","resources","pl","translations","text1","text2","result","de","en","ns","defaultNS","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9fca9c5a.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginBottom: \"2vh\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst Navbar = ({ changeLanguageHandler }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          />\n          <Typography variant=\"h6\" className={classes.title}>\n            Menu\n          </Typography>\n          <Button onClick={() => changeLanguageHandler(\"pl\")} color=\"inherit\">\n            PL\n          </Button>\n          <Button onClick={() => changeLanguageHandler(\"en\")} color=\"inherit\">\n            EN\n          </Button>\n          <Button onClick={() => changeLanguageHandler(\"de\")} color=\"inherit\">\n            DE\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Navbar from \"./components/Navbar/Navbar.jsx\";\nimport Typography from \"@material-ui/core/Typography\"\n\nconst App = () => {\n  const { i18n } = useTranslation();\n\n  const changeLanguage = lng => {\n    i18n.changeLanguage(lng);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar changeLanguageHandler={changeLanguage} />\n      <div className=\"App-intro\">\n        <Typography>\n          {i18n.t('result')}\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n    .use(initReactI18next)\n    .init({\n        lng: 'pl', // to fixed react-i18next:: i18n.languages were undefined or empty undefined \n        resources: {\n            pl: {\n                translations: {\n                    \"text1\": \"Litwo, Ojczyzno moja! ty jesteś jak zdrowie.\",\n                    \"text2\": \"Ile cię trzeba cenić, ten tylko się dowie, Kto cię stracił. Dziś piękność twą w całej ozdobie Widzę i opisuję, bo tęsknię po tobie.\",\n                    \"result\": \"$t(text1), $t(text2)\",\n                }\n            },\n            de: {\n                translations: {\n                    \"result\": \"Deutsches Ipsum Dolor id latine Glühwein complectitur pri, mea meliore denique 99 Luftballons id. Elitr expetenda nam an, Mercedes Benz ei reque euismod assentior. Odio Reise iracundia ex pri. Ut vel Schwarzwälder Kirschtorte mandamus, quas natum adversarium ei Schnaps diam minim honestatis eum no\",\n                }\n            },\n            en: {\n                translations: {\n                    \"result\": \"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections.\"\n                }\n            }\n        },\n        ns: [\"translations\"],\n        defaultNS: \"translations\",\n    });\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport './i18n';\n\n\n\nfunction render() {\n  ReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n  );\n}\nrender()\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}