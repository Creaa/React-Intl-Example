{"version":3,"sources":["translations lazy /^/.//.*/.json$/ groupOptions: {} namespace object","utils/Intl.js","components/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["map","./de.json","./en.json","./pl.json","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","intl","useStyles","makeStyles","theme","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","_ref","changeLanguageHandler","classes","react_default","a","createElement","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","intlShape","isRequired","Intl","locale","messages","message","values","formatMessage","concat","this","App","setLanguage","components_Navbar_Navbar","Boolean","window","location","hostname","match","addLocaleData","toConsumableArray","en","pl","de","load","render","ReactDOM","index_es","src_App","lang","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8LAAA,IAAAA,EAAA,CACAC,YAAA,CACA,GACA,GAEAC,YAAA,CACA,GACA,GAEAC,YAAA,CACA,GACA,IAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAP,EAAAK,GACA,OAAAG,QAAAC,UAAAC,KAAA,WACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAP,EAAA,KAEA,MADAM,EAAAE,KAAA,mBACAF,IAIA,IAAAG,EAAAd,EAAAK,GAAAU,EAAAD,EAAA,GACA,OAAAR,EAAAK,EAAAG,EAAA,IAAAJ,KAAA,WACA,OAAAJ,EAAAU,EAAAD,EAAA,KAGAX,EAAAa,KAAA,WACA,OAAAC,OAAAD,KAAAjB,IAEAI,EAAAW,GAAA,GACAI,EAAAC,QAAAhB,8CC5BIiB,yGCIEC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,aAAc,OAEhBC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLL,SAAU,MAkCCM,EA9BA,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,sBACVC,EAAUb,IAEhB,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQV,MACtBW,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,KAAK,QACLL,UAAWJ,EAAQP,WACnBiB,MAAM,UACNC,aAAW,SAEbV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWJ,EAAQJ,OAA5C,QAGAK,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,QAAS,kBAAMhB,EAAsB,OAAOW,MAAM,WAA1D,MAGAT,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,QAAS,kBAAMhB,EAAsB,OAAOW,MAAM,WAA1D,MAGAT,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,QAAS,kBAAMhB,EAAsB,OAAOW,MAAM,WAA1D,2DD/BHM,IAAUC,eAeFC,EADF,qDANZC,OAAS,UACTC,SAAW,iDAJTC,EAASC,GACV,OAAOpC,EAAKqC,cAAcF,EAASC,wEAIzBH,mFACYhD,EAAA,GAAAA,CAAO,KAAAqD,OAAmBL,EAA1B,iBAAtBM,KAAKL,6HETQM,MATf,SAAA5B,GAA8B,IAAf6B,EAAe7B,EAAf6B,YACb,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyB,EAAD,CAAQ7B,sBAAuB4B,IAC/B1B,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,MAAMK,EAAKE,SAAL,cCGZS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kHCNNC,YAAa,GAAAV,OAAAzC,OAAAoD,EAAA,EAAApD,CAAKqD,KAALrD,OAAAoD,EAAA,EAAApD,CAAYsD,KAAZtD,OAAAoD,EAAA,EAAApD,CAAmBuD,OAUhCpB,EAAKqB,KAAK,MAAMhE,KAThB,SAASiE,IACPC,IAASD,OACPvC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAcvB,OAAQD,EAAKC,OAAQC,SAAUF,EAAKE,UAChDnB,EAAAC,EAAAC,cAACwC,EAAD,CAAKhB,YAAa,SAAAiB,GAAI,OAAI1B,EAAKqB,KAAKK,GAAMrE,KAAKiE,OAEjDK,SAASC,eAAe,WD+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,KAAK,SAAA2E,GACjCA,EAAaC","file":"static/js/main.910ebb9c.chunk.js","sourcesContent":["var map = {\n\t\"./de.json\": [\n\t\t88,\n\t\t3\n\t],\n\t\"./en.json\": [\n\t\t89,\n\t\t4\n\t],\n\t\"./pl.json\": [\n\t\t90,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 85;\nmodule.exports = webpackAsyncContext;","import {\n\tintlShape\n} from \"react-intl\";\n\nvar intl;\n\nexport const IntlCapture = (props, context) => {\n\tintl = context.intl;\n\treturn props.children;\n};\n\nIntlCapture.contextTypes = {\n\tintl: intlShape.isRequired\n};\n\n\nclass _Intl {\n\tt(message, values) {\n\t\treturn intl.formatMessage(message, values);\n\t}\n\tlocale = \"pl\";\n\tmessages = {};\n\tasync load(locale) {\n\t\tthis.messages = await import(`../translations/${locale}.json`);\n\t}\n}\nconst Intl = new _Intl();\nexport default Intl;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginBottom: \"2vh\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst Navbar = ({ changeLanguageHandler }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          />\n          <Typography variant=\"h6\" className={classes.title}>\n            Menu\n          </Typography>\n          <Button onClick={() => changeLanguageHandler(\"pl\")} color=\"inherit\">\n            PL\n          </Button>\n          <Button onClick={() => changeLanguageHandler(\"en\")} color=\"inherit\">\n            EN\n          </Button>\n          <Button onClick={() => changeLanguageHandler(\"de\")} color=\"inherit\">\n            DE\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar/Navbar.jsx\";\nimport Intl from \"./utils/Intl\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction App({ setLanguage }) {\n  return (\n    <div className=\"App\">\n      <Navbar changeLanguageHandler={setLanguage} />\n      <Typography variant=\"h6\">{Intl.messages[\"loremIpsum\"]}</Typography>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { addLocaleData } from \"react-intl\";\nimport { IntlProvider } from \"react-intl\";\nimport en from \"react-intl/locale-data/en\";\nimport pl from \"react-intl/locale-data/pl\";\nimport de from \"react-intl/locale-data/de\";\nimport Intl from \"./utils/Intl\";\n\naddLocaleData([...en, ...pl, ...de]);\nfunction render() {\n  ReactDOM.render(\n    <IntlProvider locale={Intl.locale} messages={Intl.messages}>\n      <App setLanguage={lang => Intl.load(lang).then(render)} />\n    </IntlProvider>,\n    document.getElementById(\"root\")\n  );\n}\n\nIntl.load(\"pl\").then(render);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}